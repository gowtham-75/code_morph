Based on the provided microservice design and user stories, I'll expand on the rough description to generate a complete set of functionalities for the Java microservice application. The application will be called "Library Inventory Management System" (LIMS).

**Microservice Architecture:**
- **Inventory Management Service**: This microservice will handle all operations related to the inventory of books and videos. It will have its own database to store inventory data.

**Core Functionalities & API Endpoints:**

1. **Item Retrieval (GET /items):**
   - Retrieve a list of all items in the inventory.
   - Support query parameters for filtering by type (book or video), location, and branch.
   - Sample JSON Response:
     ```json
     {
       "items": [
         {"id": "b1", "type": "book", "title": "The Great Gatsby", "location": "A1", "branch": "Main"},
         {"id": "v1", "type": "video", "title": "Inception", "location": "V1", "branch": "Main"}
       ]
     }
     ```

2. **Add Book (POST /items/books):**
   - Add a new book to the inventory with details such as title, author, ISBN, location, and branch.
   - Validate input data for completeness and correctness.
   - Sample JSON Request:
     ```json
     {
       "title": "1984",
       "author": "George Orwell",
       "ISBN": "9780451524935",
       "location": "B2",
       "branch": "Main"
     }
     ```
   - Sample JSON Response:
     ```json
     {
       "id": "b2",
       "message": "Book added successfully"
     }
     ```

3. **Add Video (POST /items/videos):**
   - Add a new video to the inventory with details such as title, director, genre, location, and branch.
   - Validate input data for completeness and correctness.
   - Sample JSON Request:
     ```json
     {
       "title": "The Matrix",
       "director": "Lana Wachowski, Lilly Wachowski",
       "genre": "Action",
       "location": "V2",
       "branch": "Main"
     }
     ```
   - Sample JSON Response:
     ```json
     {
       "id": "v2",
       "message": "Video added successfully"
     }
     ```

4. **Update Item (PUT /items/{itemId}):**
   - Update details of an existing item (book or video) in the inventory.
   - Validate the existence of the item and the correctness of the updated data.
   - Sample JSON Request:
     ```json
     {
       "title": "1984",
       "author": "George Orwell",
       "ISBN": "9780451524935",
       "location": "B3",
       "branch": "Downtown"
     }
     ```
   - Sample JSON Response:
     ```json
     {
       "message": "Item updated successfully"
     }
     ```

5. **Remove Item (DELETE /items/{itemId}):**
   - Remove an item from the inventory using its ID.
   - Validate the existence of the item before deletion.
   - Sample JSON Response:
     ```json
     {
       "message": "Item removed successfully"
     }
     ```

**Additional Functionalities:**

- **Item Information Retrieval (GET /items/{itemId}):**
  - Implement a feature to retrieve detailed information about a specific item using its ID.
  - Validate the existence of the item ID in the database.
  - Sample JSON Response for a book:
    ```json
    {
      "id": "b1",
      "type": "book",
      "title": "The Great Gatsby",
      "author": "F. Scott Fitzgerald",
      "ISBN": "9780743273565",
      "location": "A1",
      "branch": "Main"
    }
    ```

**Technical Considerations:**

- **Domain-Driven Design (DDD):** Organize code into bounded contexts, with domain models representing Book and Video entities.
- **Security:** Implement security best practices such as authentication, authorization, and input validation to protect API endpoints.
- **Exception Handling:** Develop a global exception handling mechanism to handle and log exceptions gracefully.
- **Logging:** Integrate a logging framework for monitoring and debugging.
- **Validation:** Create custom validation annotations or use existing ones to validate request data.
- **Testing:** Write unit tests for each feature/module using JUnit and Mockito.
- **API Documentation:** Use Swagger or Spring REST Docs for API documentation.
- **Monitoring:** Integrate with monitoring tools like Prometheus and Grafana.
- **CI/CD:** Set up a CI/CD pipeline using tools like Jenkins, GitLab CI, or GitHub Actions.

**Data Model:**

- **Book:**
  - ID (Primary Key)
  - Title
  - Author
  - ISBN
  - Location
  - Branch
- **Video:**
  - ID (Primary Key)
  - Title
  - Director
  - Genre
  - Location
  - Branch

**Infrastructure:**

- **Database:** Choose a relational database like PostgreSQL for storing inventory data.

**Deployment:**

- Containerize the microservice using Docker.
- Deploy on a cloud platform or on-premises Kubernetes cluster for scalability.

This design covers the core functionalities, technical considerations, and infrastructure needed to develop the Library Inventory Management System as described. Each feature/module should be developed incrementally, with continuous integration and testing to ensure quality and reliability.