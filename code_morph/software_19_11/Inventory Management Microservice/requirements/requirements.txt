Based on the provided microservice design and user stories, we will design a Java microservice application using Spring Boot, adhering to Domain-Driven Design principles, and implementing RESTful APIs. Below is an elaboration of the complete set of functionalities needed for the software:

### Inventory Management Microservice

#### Subdomain:
- Inventory Management (Books and Videos)

#### Responsibilities:
- Manages the library's inventory of books and videos.
- Handles adding, updating, and removing items.

#### Main Entities:
- Book
- Video
- Location
- Branch

#### API Endpoints:
1. `GET /items`: Retrieves a list of all items in the inventory.
2. `POST /items/books`: Adds a new book to the inventory.
3. `POST /items/videos`: Adds a new video to the inventory.
4. `PUT /items/{itemId}`: Updates an item's details based on its ID.
5. `DELETE /items/{itemId}`: Removes an item from the inventory based on its ID.

#### Additional Considerations:
- Decomposition into smaller microservices if needed.
- Data Migration strategies for existing data.
- Incorporating Event-Driven Architecture for decoupling services and asynchronous communication.
- Implementing Security measures such as authentication and authorization.
- Comprehensive Testing including unit tests for each feature.
- API Documentation using tools like Swagger.
- Monitoring and Logging for observability.
- Continuous Integration/Continuous Deployment (CI/CD) pipelines for automated testing and deployment.

### User Stories Implementation:

#### User Story 002: Item Information Service
- **Functionalities**:
  - Retrieve item information by ID.
  - Differentiate between book and video items.
  - Validate item ID against the database.
  - Ensure the returned item information is current and accurate.

- **API Endpoints**:
  - `GET /items/{itemId}`: Retrieves detailed information about a specified item.

- **Sample JSON Request/Response**:
  - Request: `GET /items/123`
  - Response:
    ```json
    {
      "itemId": "123",
      "type": "Book",
      "title": "Effective Java",
      "author": "Joshua Bloch",
      "branch": "Downtown",
      "location": "Shelf 7"
    }
    ```

#### User Story 007: Media Management Service
- **Functionalities**:
  - Add new media items to the library.
  - Update details of existing media items.
  - Remove media items from the library.
  - Validate media details for completeness and accuracy.
  - Perform database operations to reflect these changes.

- **Additional API Endpoints**:
  - `POST /items`: Adds a new media item (book or video) to the inventory.
  - `PUT /items/{itemId}`: Updates an existing media item's details.
  - `DELETE /items/{itemId}`: Removes a media item from the inventory.

- **Sample JSON Request/Response**:
  - Add Request: `POST /items/books`
    ```json
    {
      "title": "Clean Code",
      "author": "Robert C. Martin",
      "isbn": "9780132350884",
      "branch": "Uptown",
      "location": "Shelf 3"
    }
    ```
  - Add Response:
    ```json
    {
      "itemId": "456",
      "message": "Book added successfully."
    }
    ```

### Development and Design Choices:
- Create a microservice for each main entity where it makes sense for scalability and maintainability.
- Use Spring Data for database interactions, and Spring Security for securing endpoints.
- Implement Model-View-Controller (MVC) design pattern within each microservice.
- Use Hibernate for object-relational mapping and handling database migrations.
- Use a centralized logging service like ELK stack for logging.
- Use JUnit and Mockito for unit testing.
- Use Git for version control and Jenkins for CI/CD.
- Use Docker for containerization and Kubernetes for orchestration if scalability is a concern.

### Security and Performance Considerations:
- Implement rate limiting and circuit breaker patterns to protect the API endpoints.
- Use HTTPS for secure communication.
- Use OAuth2 and JWT for secure authentication and authorization.
- Optimize database queries and indexes for performance.
- Implement caching where appropriate to reduce database load.

This design provides a comprehensive blueprint for building the Java microservice application based on the provided microservice design and user stories. Design choices have been made to ensure a robust, secure, and maintainable system that adheres to best practices in software development.